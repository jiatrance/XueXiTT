1
00:00:00,060 --> 00:00:04,200
 好的家伙欢迎回来 
 教程 我想和你谈谈 

2
00:00:04,200 --> 00:00:09,570
首先称为线程的东西
所有让我们继续前进，了解什么是 

3
00:00:09,570 --> 00:00:15,630
线程是为什么它们 如此 有用 
到目前为止我们已经建立了一些非常好的 

4
00:00:15,630 --> 00:00:20,279
简单的程序，你了解到 
几乎建立一个 程序是善良的 

5
00:00:20,279 --> 00:00:24,269
 喜欢给你的电脑ACEF 
说明我们需要给 它一个好的 

6
00:00:24,269 --> 00:00:30,599
 按照 逻辑顺序 执行步骤 1 
然后2然后3那几乎是什么 

7
00:00:30,599 --> 00:00:36,530
 编写代码就是为了给你 
计算机现在要遵循一些指示

8
00:00:36,530 --> 00:00:42,870
有时分手是有用的 
单个程序，让它做多个 
 现在我想要 警告你的 事情 

9
00:00:45,539 --> 00:00:49,920
 大多数时候，这不是一个好人 
想法， 因为 喜欢无论何时 你正在 制作 

10
00:00:49,920 --> 00:00:54,030
 你不能添加的计算 
数字或划分他们或做

11
00:00:54,030 --> 00:00:57,840
你想以任何顺序 出局无论你 
 你需要 得到 一个糟糕的结果 

12
00:00:57,840 --> 00:01:01,920
按照特定的顺序，从而大部分 
时间你不想使用线程 

13
00:01:01,920 --> 00:01:06,900
 你的程序将运行精 做 
什么时候建立一个 程序 

14
00:01:06,900 --> 00:01:11,610
 多事情 一次 是有益的 
这是最常见的 例子之一 

15
00:01:11,610 --> 00:01:17,460
每当我教线程时，无论什么时候 
你正在制作一个信使程序

16
00:01:17,460 --> 00:01:20,369
你要做的就是你基本上 
打算建立两个不同的程序

17
00:01:20,369 --> 00:01:25,350
 同时他们中的一个 运行 是 怎么回事 
 负责 发送消息 

18
00:01:25,350 --> 00:01:31,170
 其中之一 将 是 
负责收听 消息 

19
00:01:31,170 --> 00:01:35,759
所以，每当你 和某人说话时 
 像即时通讯一样无所谓 

20
00:01:35,759 --> 00:01:41,220
 当他们发送消息或原谅 我 
当您发送消息或何时发送消息 

21
00:01:41,220 --> 00:01:45,689
收到一条消息， 你知道你没有 
 不得不等待 他们 发送一个 

22
00:01:45,689 --> 00:01:50,610
 您可以开始输入之前的消息
你会想做什么 

23
00:01:50,610 --> 00:01:54,840
想要建立两个不同的对象和 
一个负责发送和 

24
00:01:54,840 --> 00:01:59,659
一个人负责 接收或 
听，它 真的很酷 

25
00:01:59,659 --> 00:02:03,990
喜欢聊天， Skype或 即时消息 
 信使应用所以让我继续吧 
 并告诉你们如何做到 这一点 

26
00:02:05,130 --> 00:02:12,690
 所以 现在 我们需要 做 的第一 件事 就是 
导入线程以及它的作用 

27
00:02:12,690 --> 00:02:16,550
它
 我们要做的一个课程

28
00:02:16,550 --> 00:02:23,520
我们要制作 类似的东西 
 Bucky的使者和我们要去的东西 

29
00:02:23,520 --> 00:02:28,650
要做的是我们 真的要 继承 
 从这堂课那么记住你 

30
00:02:28,650 --> 00:02:35,790
放在这里是你的父类
现在继承我们的任何对象 

31
00:02:35,790 --> 00:02:39,060
创建
这是Bucky的使者，我们得到了一堆 

32
00:02:39,060 --> 00:02:45,890
很酷的内置线程函数所以 
 我们需要的一个功能是def 
现在运行你会看到它自动弹出 

33
00:02:49,200 --> 00:02:52,980
因为这 不仅仅是你所知道 的 
 我正在挑选它的名字 

34
00:02:52,980 --> 00:02:59,370
 我的 脑袋 这是一个非常具体的名字 
 我们需要有正中下怀 

35
00:02:59,370 --> 00:03:03,780
特殊的线程所以意味着什么 
 特别是线程基本上每当我们 

36
00:03:03,780 --> 00:03:09,030
创建一个 它将调用它的 线程 
运行功能所以它现在不会关闭 

37
00:03:09,030 --> 00:03:13,800
让我们继续，然后写一些代码 
在它只是为了一个简单的演示 

38
00:03:13,800 --> 00:03:18,810
 我的意思是你通常想做 什么 
是一个复杂的程序 负责 

39
00:03:18,810 --> 00:03:23,640
我不喜欢发送消息
 知道 像你可以像 一次 
第二个也许， 但现在我 只是去 

40
00:03:25,920 --> 00:03:30,900
 循环 一下十次给你看 
伙计们，这是一个很好的演示 

41
00:03:30,900 --> 00:03:36,630
 这个线程究竟是如何运作的 
所以其实我甚至不知道 我是否 

42
00:03:36,630 --> 00:03:43,410
教你这个，所以你以前知道
 每当我做一个for循环和我 

43
00:03:43,410 --> 00:03:48,180
像4x 并 安排 10或 fortuna' 
 在范围10 

44
00:03:48,180 --> 00:03:54,120
以及金枪鱼或X变量等于 
 数1 2 3 4 一路 向上 

45
00:03:54,120 --> 00:03:59,519
 无论 多少，它都是9 或10 
你想要循环的时间，以便你 可以使用 

46
00:03:59,519 --> 00:04:04,620
该变量并打印出来或使用它 
在计算或东西但 

47
00:04:04,620 --> 00:04:09,060
 有时我们 只想循环10次 
 我们真的 不在乎什么 号码 

48
00:04:09,060 --> 00:04:13,709
我们在那个或那个变量都是如此
当你不想要时，你可以做到

49
00:04:13,709 --> 00:04:17,760
 使用 那个变量或那个值你可以 
只是在那里放下一个下划线 

50
00:04:17,760 --> 00:04:22,049
这就是那种常规 
 很多是说好的 我想循环10 

51
00:04:22,048 --> 00:04:25,169
 时代 并不真正关心 
变量所以我只是想用 

52
00:04:25,169 --> 00:04:28,450
强调到位 
所以这是什么意思，你 只 知道 

53
00:04:28,450 --> 00:04:34,600
那种Python约定所以我该怎么做
想做好十次好酷 

54
00:04:34,600 --> 00:04:40,360
什么时候我们继承了一堆
 从这个线程类的东西或 

55
00:04:40,360 --> 00:04:49,300
 威胁实际上让我输入它 
因为它是当前线程的一部分 

56
00:04:49,300 --> 00:04:56,380
我们应该将我的光标 的方式进行 
 现在得到我们能做的就是其中之一 

57
00:04:56,380 --> 00:05:01,420
我们可以给每一个内置的东西
线程名称， 因此它是默认名称之一 

58
00:05:01,420 --> 00:05:05,950
 带有线程的属性所以我想要的 
 要做的是我 要做两个不同的事情 

59
00:05:05,950 --> 00:05:10,300
 有两个不同 名字的线程， 我 
只是要打印 出他们的名字 

60
00:05:10,300 --> 00:05:14,380
 然而它真的很酷，它不仅仅是 
喜欢打印出来 的 东西 

61
00:05:14,380 --> 00:05:21,570
 屏幕十次，所以我会告诉你们 
 它是 如何 的酷现在 这样对 我们的 

62
00:05:21,570 --> 00:05:26,940
信使这就是我们所拥有的一切 
这就是我们现在所需要的一切

63
00:05:26,940 --> 00:05:32,140
 这个班级就在这里，但它可以 
 线程 ，这意味着 你可以 

64
00:05:32,140 --> 00:05:37,330
有这个类的多个对象
 在你没有的同一时间运行 

65
00:05:37,330 --> 00:05:42,130
 需要等待一个 完成 
开始下一个，让我们 继续吧 

66
00:05:42,130 --> 00:05:46,840
实际创建一个，所以我 命名 一个X和 
 这 只是将是等于 

67
00:05:46,840 --> 00:05:54,220
 Bucky的使者，记得其中一个 
 内置属性或默认值 

68
00:05:54,220 --> 00:05:58,720
 我们可以给出一个线程的属性
它是一个名字， 所以我要 设置这个名字 

69
00:05:58,720 --> 00:06:05,590
等于，这只是一个例子 
发出消息所以我们会说这个 
是这个线程负责的 

70
00:06:07,390 --> 00:06:12,910
 那么现在就让我继续前进， 使 
 另一个真正的快速和现实生活 

71
00:06:12,910 --> 00:06:16,750
 这将是什么 而 不仅仅是 
给它一个名字 你实际上就是你 

72
00:06:16,750 --> 00:06:26,430
知道添加功能 以喜欢接收 
消息，所以现在我们有两个线程 

73
00:06:26,430 --> 00:06:32,590
就在那里，现在就检查一下
你看着这个，说好的 
 这里只有一个函数叫做 

74
00:06:34,539 --> 00:06:37,860
跑，所以你可能会这样做 
 像 X这样的东西

75
00:06:37,860 --> 00:06:43,560
跑，但不是你的情况 
创建一个你想要做的线程

76
00:06:43,560 --> 00:06:52,009
要在调用start功能
 那个线程让X 星和Y开始了 

77
00:06:52,009 --> 00:06:55,409
尽管这有点我不喜欢 
 知道它 真的没有 意义 

78
00:06:55,409 --> 00:07:00,090
 每当你打电话给这个开始时 
功能它的作用是不言而喻 的是 

79
00:07:00,090 --> 00:07:06,539
 class，它查找一个名为的函数 
 这样运行它 有点奇怪但是 

80
00:07:06,539 --> 00:07:10,919
 这是它的工作原理 
所以现在开始如何开始一个线程 

81
00:07:10,919 --> 00:07:19,050
这与任何正常功能都不同
实际上你 可以看看这个

82
00:07:19,050 --> 00:07:23,370
有点看到这里， 但让我运行一个 
更多的时间只是我们去那里是一个 

83
00:07:23,370 --> 00:07:29,669
更好的例子，所以在我们之前 
创建对象发生的事情是我们的 

84
00:07:29,669 --> 00:07:35,610
程序从上到下运行所以它 
跑了这条线完了然后它 

85
00:07:35,610 --> 00:07:40,259
继续这条线完成了继续 
 列表 行以及此行的作用 

86
00:07:40,259 --> 00:07:45,180
 是它创建一个名称的线程 
发出消息然后循环播放 

87
00:07:45,180 --> 00:07:51,629
 它 的十倍那么之前所发生的事情是 
这将打印发送消息十 

88
00:07:51,629 --> 00:07:56,759
时间和它一旦完成它 
 将 移动到 下一行 ，但检查 

89
00:07:56,759 --> 00:08:02,520
这个发送发送发送接收发送 
收到发送接收 为什么都是 
混杂在一起这很酷 

90
00:08:04,440 --> 00:08:09,180
 关于线程 与线程的事情 
不需要等待这个 完成 

91
00:08:09,180 --> 00:08:14,460
 在移动到 下一行与 前 
线程你的程序将 要做什么 

92
00:08:14,460 --> 00:08:20,099
这是否 可以说 这是一个 
线程，我要开始吧 

93
00:08:20,099 --> 00:08:25,229
 换句话说，我打算称之为run和as 
 我很快就完成了 

94
00:08:25,229 --> 00:08:30,599
做我只是要去 下一个 
行， 并做任何它 告诉我缝 

95
00:08:30,599 --> 00:08:36,000
 最终 我们拥有了什么 
短暂的 时间 就是这些 

96
00:08:36,000 --> 00:08:42,719
事情在精确的同一时间 运行 ，所以 
现在我们的计算机程序很多

97
00:08:42,719 --> 00:08:47,459
 更强大， 更快或更快 
不过你说的那么快
 这就是一体的 

98
00:08:51,200 --> 00:08:55,910
你会利用线程的实例
 再做一个信使程序 
警告你们， 你们不想使用它们 

99
00:08:58,279 --> 00:09:01,880
 即使它 ， 所有线程
 这会加速你的程序 

100
00:09:01,880 --> 00:09:07,220
 在计算中 真的太糟糕 了 
你喜欢平均一堆数字 

101
00:09:07,220 --> 00:09:12,230
 那么你需要添加所有这些数字 
 你做你的分裂之前在一起， 

102
00:09:12,230 --> 00:09:15,560
如果你喜欢加入并尝试 
在划分你要同时
得到一个你知道的 

103
00:09:17,120 --> 00:09:21,920
搞砸了答案，所以你不会想 
 在那种情况下这样做，但是 

104
00:09:21,920 --> 00:09:26,630
 真正不依赖的程序
 其他事情发生 ，可以运行 

105
00:09:26,630 --> 00:09:32,089
同时或同时线程 
这是一个很棒的功能 

106
00:09:32,089 --> 00:09:35,899
现在谢谢 你们观看不要 
 忘 了订阅，我会看到 

107
00:09:35,899 --> 00:09:38,019
你以后 