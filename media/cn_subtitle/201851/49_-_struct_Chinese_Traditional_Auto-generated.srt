1
00:00:00,000 --> 00:00:03,750
已经欢迎回来了
 视频我想和你谈谈 

2
00:00:03,750 --> 00:00:09,510
 现在，他们是一个结构体 
 Python 很好结构是你的一种方式 

3
00:00:09,510 --> 00:00:13,530
 实际上可以采用任何类型的数据 
 python是否是数字字母 

4
00:00:13,530 --> 00:00:20,460
串起来，你可以转换它 
到字节格式所以第一个 问题是为什么 

5
00:00:20,460 --> 00:00:24,390
我们是否愿意 这样做 我的意思是 
 了解你的情况可能会很有趣 

6
00:00:24,390 --> 00:00:28,830
 计算机存储内存或如何 
 通过网络传输数据，但 你 
 真的不关心那些 零 

7
00:00:30,810 --> 00:00:36,450
 大部分时间都是为什么我们要学习 
这个我真的会成为 

8
00:00:36,450 --> 00:00:41,370
 关于一些新的教程系列 
 Python 和 Linux中的 网络应用程序 
无论何时使用网络 

9
00:00:43,320 --> 00:00:48,840
 您 实际需要阅读的 应用程序 
字节值，所以你在网络上 

10
00:00:48,840 --> 00:00:52,050
 而且你看到所有这些 零都来了 
跨越，你需要实际 
解释它，因为人类无法阅读 

11
00:00:54,180 --> 00:00:59,039
 为零，所以我们需要弄清楚 
 一种 获取原始数据的方法 

12
00:00:59,039 --> 00:01:03,600
数据并将其变成某种东西 
 对人类可读， 这就是为什么 我 

13
00:01:03,600 --> 00:01:07,920
将向您 展示如何使用strux 
基本上把零和零变成 

14
00:01:07,920 --> 00:01:11,909
 人类可以阅读的东西
 你需要做的第一件事就是去 

15
00:01:11,909 --> 00:01:18,540
从struct import all ，我将展示 
你们这些 如何打包和打包以及 什么 

16
00:01:18,540 --> 00:01:22,650
所有这意味着 ，所以我的第一件事 
 要做的就是我们 要做的 

17
00:01:22,650 --> 00:01:27,570
一些数据，我只有三个 
 无论19还是一些，数字都像6 
浮动，我们将存储他的字节存储 

18
00:01:31,350 --> 00:01:39,780
作为字节数据，有人正在 给我发短信 
实际上那是男性 而且是一个 

19
00:01:39,780 --> 00:01:46,229
 更新我的 Facebook页面没事 如此 
我们如何在实际转换中获取数据 

20
00:01:46,229 --> 00:01:50,280
它到字节为什么我们要这样做 
好吧，我们准备送一些 

21
00:01:50,280 --> 00:01:54,360
 跨网络的数据以及我们走吧 
 提前做一个变量 我会 做的 

22
00:01:54,360 --> 00:01:58,170
 把它命名为up up 和你需要的东西 
 要做的是你需要调用一个函数 

23
00:01:58,170 --> 00:02:03,509
 所谓一包 ，现在 你 可以 看到之前 
 我点击进入这将需要两个 

24
00:02:03,509 --> 00:02:08,819
参数第一个是格式 
 第二个将 是一个列表 

25
00:02:08,818 --> 00:02:12,160
 价值观，它可以只是一个 
价值就像数字或 

26
00:02:12,160 --> 00:02:16,720
 或者你可以知道像你这样的清单 
知道十个不同的数字 

27
00:02:16,720 --> 00:02:23,070
所以记得格式和值 这么好吗 
如果你去 Python 文档 

28
00:02:23,070 --> 00:02:29,170
 他们会说你存储和存储的东西 
他们会给你一封什么的信 

29
00:02:29,170 --> 00:02:34,900
 但是说 我们想 扭曲 
 两个整数 和一个小数点浮点数 

30
00:02:34,900 --> 00:02:39,910
点
 那么整数的关键字就是我 

31
00:02:39,910 --> 00:02:43,960
如果我们想存储两个人只是 
 我打字两次，然后我也要去 

32
00:02:43,960 --> 00:02:48,010
存储一个小数点 或浮点数，所以我 
 如果我只是，那就去写吧 
 我希望存储五个整数 

33
00:02:50,710 --> 00:02:55,470
只写我五次， 但 我们走了 
 提前并 在浮点数中 开始两个整数 

34
00:02:55,470 --> 00:03:00,310
 所以现在用 逗号 分隔这个我们 
只需要给它两个整数 

35
00:03:00,310 --> 00:03:07,740
 因此，我会说像六个 19和19 
漂浮得像四点七三 

36
00:03:07,740 --> 00:03:12,670
什么，当然，如果你正在使用 
 像字符串或字符或任何东西 
像那么这将是 

37
00:03:14,380 --> 00:03:19,450
不同但基本上每当 你 
有像这样的数据，你想 

38
00:03:19,450 --> 00:03:24,400
将其转换为字节格式只需写入 
 你正在 存储什么类型的数据 

39
00:03:24,400 --> 00:03:28,780
那么数据本身就足够简单了 
如果你真的只是 想看到这个 

40
00:03:28,780 --> 00:03:32,830
现在我们可以打印出来了 
记得每当我打印出来的时候 

41
00:03:32,830 --> 00:03:38,590
打算以字节格式打印出来 
这个B就在这里

42
00:03:38,590 --> 00:03:47,050
它表示字节，现在你看到所有 
 那些东西 所以/ xo 6 / x double-o all 

43
00:03:47,050 --> 00:03:51,730
 那个垃圾，所以每当你 
在这 网络上传输数据
实际发送的是什么，这就是原因 

44
00:03:55,180 --> 00:03:59,080
当很多人 试图建立像 
密码嗅探器，他们开始 看到你 

45
00:03:59,080 --> 00:04:03,670
知道他们就像那样 
现在我们知道背后发生了什么
 现在我想向你们展示一些场景 

46
00:04:06,130 --> 00:04:10,060
在我向你们展示之前，其他很酷的事情
如何获取该字节数据实际上 

47
00:04:10,060 --> 00:04:15,400
将它转换回来它是一个巨大的人类 
可读的形式，所以这将会到来 

48
00:04:15,400 --> 00:04:19,900
 每当 我们学习 时，都会派上用场
 为什么我们需要得到一定的 

49
00:04:19,899 --> 00:04:23,830
 字节 数 ，所以检查这个 
计算尺寸

50
00:04:23,830 --> 00:04:27,470
这是博功能 
告诉你有多少字节 需要 

51
00:04:27,470 --> 00:04:31,430
存储一些值，所以让我输入 I 
 在那里 

52
00:04:31,430 --> 00:04:42,560
让我输入 像f 这样的东西 
和IIF IIF 重新检查一下 

53
00:04:42,560 --> 00:04:46,370
所以我们打印出 字节数据 
 我 之前已经看过 了 ，现在我已经看到 了 

54
00:04:46,370 --> 00:04:51,500
 要打印出所需的大小 
存储一个整数浮点数和我们的数据 

55
00:04:51,500 --> 00:04:58,940
这是两个整数 和一个浮点数 
 好吧所以它说 4 4 12所以每当 

56
00:04:58,940 --> 00:05:03,020
您正在通过网络发送数据
 你要 发送一个整数 

57
00:05:03,020 --> 00:05:07,790
最多4个字节，这是 多少空间或 
内存在流程中占用同样的东西 

58
00:05:07,790 --> 00:05:12,320
大小相同， 每个大小4个字节 
我们试图计算出所需的大小 

59
00:05:12,320 --> 00:05:17,770
将两个整数存储在浮点数中它是12 
 这是有道理的4加4 加 4 

60
00:05:17,770 --> 00:05:22,370
等于12 
 以后我们要做什么 

61
00:05:22,370 --> 00:05:26,810
我们要说的是获得前12名
 这个数据包的字节或东西 

62
00:05:26,810 --> 00:05:30,800
现在你们都喜欢哦所以这就是原因 
 因为你知道 这是多少空间 

63
00:05:30,800 --> 00:05:37,760
它占据了如此轻松的微风 
 covergirl现在我们需要想象 

64
00:05:37,760 --> 00:05:44,210
 如何获取所有这个字节的数据 
数据并将其转换回人类 

65
00:05:44,210 --> 00:05:49,640
如果PAC是，那么可读的形式
功能使它字节数据解包是 

66
00:05:49,640 --> 00:05:55,520
功能让它恢复正常，从而 
我会告诉孩子我不知道数据 

67
00:05:55,520 --> 00:06:06,920
 正常说来获得字节数据 没事 
 所以我只是将原始数据命名为 

68
00:06:06,920 --> 00:06:12,410
 我们需要 做 的 是，我们需要 解压 
 它现在每当你打开包装的时候你也是 

69
00:06:12,410 --> 00:06:17,630
需要给它格式，所以它会发生 
 要寻找 一串字节的 这 
实际上就是这件事而且它会发生 

70
00:06:20,210 --> 00:06:25,070
 说 好的胳膊 你想让我做什么 
就像这里有整数一样

71
00:06:25,070 --> 00:06:28,520
 有 字符或 有字符串 
 浮在水面上你想要我怎么样 

72
00:06:28,520 --> 00:06:32,030
打开它，我们说有 
实际上有两个整数和一个浮点数 

73
00:06:32,030 --> 00:06:38,510
这里现在是你的第二个参数 
只需给它打包数据 

74
00:06:38,510 --> 00:06:42,960
就这样，这就是你的全部 
 每次运行时都会出现这样的 字节 

75
00:06:42,960 --> 00:06:53,580
这个，我们需要实际 打印它 
出则检查出来没事 因此所有 

76
00:06:53,580 --> 00:07:01,260
 这是从 之前 和现在 我们打开包装 
它和我们得到619和我们的浮动 

77
00:07:01,260 --> 00:07:06,330
四点七三 和一些数字 
 最后， 因为电脑很棒 

78
00:07:06,330 --> 00:07:13,110
 它存储小数点，但我们得到了一个 
那里有一些额外的价值

79
00:07:13,110 --> 00:07:17,330
你走得那么另一件事 ， 我会 
 实际上想 告诉 你们这是谁 
如果我只是复制所有这些字节数据 

80
00:07:20,160 --> 00:07:25,400
就在这里记住这基本上是 
 6个十九岁时 四点七 三 
 你 可以实际存储为字节

81
00:07:29,280 --> 00:07:39,630
这个打印打开包装，并把 你 所有 的 
字节数据就在那里， 所以这可能 是一个 

82
00:07:39,630 --> 00:07:43,440
 有点 容易直观地看到 
 当你第一次开始学习 

83
00:07:43,440 --> 00:07:48,840
这样，让我继续这样做吧 
 我们 在那里 得到 相同的结果 

84
00:07:48,840 --> 00:07:54,990
 因为这个变量当然是平等的 
 在那里，但 基本上 

85
00:07:54,990 --> 00:07:58,620
每当你必须使用字节或 
你需要有字节数据和传输 

86
00:07:58,620 --> 00:08:05,730
然后它回到人类可读的形式 
您可以使用包和解压 来袭 

87
00:08:05,730 --> 00:08:11,750
 你去的地方非常容易。 我会的 
 接下来见